plugins {
    id 'java'
    id 'com.diffplug.spotless' version '6.25.0'
    id 'maven-publish'
}

allprojects {
    // With this, we can reference java dependencies within git. https://www.jvt.me/posts/2021/10/27/gradle-plugin-jitpack/
    repositories {
        mavenCentral()
    }
    // Don't cache snapshots
    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }
}

spotless {
    java {
        palantirJavaFormat()
    }
    groovyGradle {
        target '*.gradle' // default target of groovyGradle
        greclipse()
        indentWithSpaces()
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

dependencies {
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'com.google.guava:guava:32.1.1-jre'
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'jakarta.annotation:jakarta.annotation-api:3.0.0'
    implementation 'org.slf4j:slf4j-api:2.0.12'

    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.3'
    testImplementation 'org.assertj:assertj-core:3.25.3'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

group = 'com.ziro.engineering'
version = resolveProjectVersion()

def resolveProjectVersion() {
    def branch = gitBranch()
    if (branch == 'main') {
        return file("${rootDir}/version.txt").text.trim()
    } else {
        return branch + '-SNAPSHOT'
    }
}

def gitBranch() {
    def branch = ""
    def proc = "git rev-parse --abbrev-ref HEAD".execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    branch
}



publishing {
    publications {
        maven(MavenPublication) {
            artifact("build/libs/espresso-${version}.jar") {
                extension 'jar'
            }
        }
    }

    repositories {
        maven {
            url = uri("https://repository.goziro.com/repository/engineering/")
            credentials {
                try {
                    username = System.getenv("SONATYPE_USERNAME") as String
                    password = System.getenv("SONATYPE_PASSWORD") as String
                } catch (NullPointerException e) {
                    throw new Exception("SONATYPE_USERNAME and SONATYPE_PASSWORD environment variables are not set! Please see the README for instructions on how to do this.", e)
                }
            }
        }
    }
}
